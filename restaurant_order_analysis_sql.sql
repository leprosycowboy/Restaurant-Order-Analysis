## Restaruant Order Analysis ##
-- Use the restarurant_db database.
USE restaurant_db;

-- 1.1. View all records in menu_items table.
SELECT *
FROM menu_items;

-- 1.2. Find the total number of items on the menu.
SELECT COUNT(*) AS total_num_menu
FROM menu_items;

-- 1.3. Find the least expensive item on the menu.
SELECT *
FROM menu_items
ORDER BY price
LIMIT 1;
-- Find the most expensive item on the menu.
SELECT *
FROM menu_items
ORDER BY price DESC
LIMIT 1;

-- 1.4. Count the number of Italian dishes on the menu.
SELECT COUNT(*) AS italian_dishes
FROM menu_items
WHERE category = 'Italian';

-- 1.5. Find the least expensive Italain dish on the menu.
SELECT *
FROM menu_items
WHERE category = 'Italian'
ORDER BY price
LIMIT 1;

-- Find the most expensive Italian Dish on the menu.
SELECT *
FROM menu_items
WHERE category = 'Italian'
ORDER BY price DESC
LIMIT 1;

-- 1.6. Count the number of dishes in each category.
SELECT category, COUNT(menu_item_id) AS num_dishes
FROM menu_items
GROUP BY category
ORDER BY num_dishes DESC;

-- 1.7. Calcualte the average dish price within each category.
SELECT category, AVG(price) AS avg_prices
FROM menu_items
GROUP BY category 
ORDER BY avg_prices DESC;

-- 2.1. View all records in the order_details table.
SELECT *
FROM order_details;

-- 2.2. Find the date range of the orders.
SELECT MIN(order_date) AS oldest_order_date, MAX(order_date) AS latest_order_date
FROM order_details;

-- 2.3. Count the total number of unique order within the date range.
SELECT COUNT(DISTINCT order_id) AS total_unique_order
FROM order_details;

-- 2.4. Count the total number of items within the date range.
SELECT COUNT(*) AS total_order_items
FROM order_details;

-- 2.5. Find the orders with the most number of items.
SELECT order_id, COUNT(item_id) AS num_items
FROM order_details
GROUP BY order_id
ORDER BY num_items DESC;

-- 2.6. Count the number of orders that had more than 12 items.
SELECT COUNT(*) AS order_with_more_than_12_items
FROM (
	SELECT order_id, COUNT(item_id) AS num_items
	FROM order_details
	GROUP BY order_id
	HAVING num_items > 12
) AS num_orders;

-- 3.1 Combine the menu_items and order_details tables into a single table to view all details.
SELECT *
FROM order_details AS od
LEFT JOIN menu_items AS mi
	ON od.item_id = mi.menu_item_id;

-- 3.2 Find the least and most ordered items and their categorys.
SELECT item_name, category, COUNT(order_details_id) AS num_purchases
FROM order_details AS od
LEFT JOIN menu_items AS mi
	ON od.item_id = mi.menu_item_id
GROUP BY item_name, category
ORDER BY num_purchases DESC;

-- 3.3 Find the top 5 orders that spent the most money.
SELECT order_id, SUM(price) AS total_spend
FROM order_details AS od
LEFT JOIN menu_items AS mi
	ON od.item_id = mi.menu_item_id
GROUP BY order_id
ORDER BY total_spend DESC
LIMIT 5;

-- 3.4 View the details of the top 5 orders and the specific items purchased in each.
SELECT order_id, category, COUNT(item_id) AS num_items
FROM order_details AS od
LEFT JOIN menu_items AS mi
	ON od.item_id = mi.menu_item_id
WHERE order_id IN(440, 2075, 1957, 330, 2675)
GROUP BY order_id, category
ORDER BY num_items DESC;

-- 4.1 Analyze sales trends by month.
SELECT DATE_FORMAT(order_date, '%Y-%M') AS order_month, COUNT(*) AS total_orders, SUM(price) as total_revenue
FROM order_details AS od
LEFT JOIN menu_items AS mi
	ON od.item_id = mi.menu_item_id
GROUP BY order_month
ORDER BY order_month;

-- 4.2 Analyze sales trends by day of the weeks.
SELECT DAYNAME(order_date) AS order_day, COUNT(*) AS total_orders, SUM(price) as total_revenue
FROM order_details AS od
LEFT JOIN menu_items AS mi
	ON od.item_id = mi.menu_item_id
GROUP BY order_day
ORDER BY FIELD(order_day, 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday');

-- 4.3 Analyze sales trends by hour of the day.
SELECT hour(order_time) AS order_hour, COUNT(*) AS total_orders, SUM(price) as total_revenue
FROM order_details AS od
LEFT JOIN menu_items AS mi
	ON od.item_id = mi.menu_item_id
GROUP BY order_hour
ORDER BY total_revenue DESC;

-- 4.4 Calculte the total revenu generated by each category.
SELECT category, SUM(price) AS toal_revenue
FROM order_details AS od
LEFT JOIN menu_items AS mi
	ON od.item_id = mi.menu_item_id
GROUP BY category
ORDER BY toal_revenue DESC;


